server {
    listen 80;
    server_name cloud-549585597.onetsolutions.network;
    
    # For Let's Encrypt certificate validation
    location /.well-known/acme-challenge/ {
        root /var/www/certbot;
    }
    
    # Redirect all HTTP traffic to HTTPS
    location / {
        return 301 https://$host$request_uri;
    }
}

# SSL server configuration
server {
    listen 443 ssl;
    server_name cloud-549585597.onetsolutions.network;
    
    # Use certificates obtained by Certbot
    ssl_certificate /etc/letsencrypt/live/cloud-549585597.onetsolutions.network/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/cloud-549585597.onetsolutions.network/privkey.pem;
    
    # SSL configuration (stronger settings recommended for production)
    ssl_protocols TLSv1.2 TLSv1.3;
    ssl_prefer_server_ciphers on;
    # ssl_ciphers '...'; # Consider defining specific strong ciphers
    # ssl_session_timeout 1d;
    # ssl_session_cache shared:SSL:50m;
    # ssl_stapling on;
    # ssl_stapling_verify on;
    # add_header Strict-Transport-Security max-age=15768000;
    
    # Shopify Embedded App headers
    add_header "Access-Control-Allow-Origin" "https://admin.shopify.com" always;
    add_header "Access-Control-Allow-Methods" "GET, POST, OPTIONS, PUT, DELETE" always;
    add_header "Access-Control-Allow-Headers" "DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization" always;
    add_header "Access-Control-Allow-Credentials" "true" always;
    
    # Remove X-Frame-Options completely
    proxy_hide_header X-Frame-Options;
    # Set Content-Security-Policy to allow Shopify's admin
    add_header Content-Security-Policy "frame-ancestors 'self' https://*.myshopify.com https://*.shopify.com https://admin.shopify.com;" always;
    
    # Web application proxy
    location / {
        proxy_pass http://web:8000;
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        
        # Pass the original host header
        proxy_set_header Origin $http_origin;
        proxy_set_header Referer $http_referer;
        
        # Process OPTIONS requests for CORS
        if ($request_method = 'OPTIONS') {
            add_header 'Access-Control-Allow-Origin' 'https://admin.shopify.com' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT, DELETE' always;
            add_header 'Access-Control-Allow-Headers' 'DNT,X-CustomHeader,Keep-Alive,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Authorization' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;
            add_header 'Access-Control-Max-Age' 1728000;
            add_header 'Content-Type' 'text/plain charset=UTF-8';
            add_header 'Content-Length' 0;
            return 204;
        }
        
        proxy_redirect off;
        client_max_body_size 10M;
    }
    
    # Static files
    location /static/ {
        alias /app/staticfiles/;
        expires 1d;
        add_header Cache-Control "public";
        
        # CORS headers for static assets
        add_header "Access-Control-Allow-Origin" "https://admin.shopify.com" always;
    }
    
    # Media files
    location /media/ {
        alias /app/media/;
        expires 1d;
        add_header Cache-Control "public";
        
        # CORS headers for media assets
        add_header "Access-Control-Allow-Origin" "https://admin.shopify.com" always;
    }
    
    # Enhanced security headers (optional but recommended)
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    # REMOVED: add_header X-Frame-Options "SAMEORIGIN";
    # REMOVED: add_header Content-Security-Policy "..."; # Define a strict CSP
} 