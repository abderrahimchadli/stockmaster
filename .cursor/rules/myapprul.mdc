---
description: 
globs: 
alwaysApply: true
---
Cursor Rules
To ensure Cursor generates the desired output, apply these rules:
Completeness: Include all specified features, models, endpoints, and enhancements without omitting any detail from the prompt.
we are working on deploy user 

also its a Embed app in Shopify admin
Shopify Integration: Fully implement Shopify API in the backend for all store data interactions and Shopify App Bridge in the frontend for embedding, authentication, navigation, and UI components.
DRF Class-Based Views: Use Django REST Framework class-based views (e.g., APIView, GenericAPIView, ViewSet) for all API endpoints, with proper serializers and permissions.
Completeness: Include all specified features, models, endpoints, and enhancements without omissions.
Modularity: Separate backend apps and frontend files by functionality (e.g., products.js, settings.py), ensuring no file exceeds 600 lines.
Comments: Add clear, detailed comments explaining each section of code (e.g., purpose of functions, API calls, or UI components).
DRY Principle: Avoid code duplication in both backend and frontend, reusing functions and components where possible.
File Naming: Use consistent naming (e.g., auth.js, products/views.py) aligned with functionality.
Error Handling: Implement robust error handling in backend (e.g., try-catch in views) and frontend (e.g., toast notifications for API failures).
Asynchronous Behavior: Ensure all frontend updates are asynchronous using Ajax/App Bridge fetch, with no full page reloads.
Responsiveness: Use Tailwind CSS classes for responsive design (e.g., md:grid-cols-3) across all devices.
Security: Follow security best practices (e.g., OAuth 2.0, secure token storage) as specified.Follow Shopify’s OAuth 2.0, webhook verification, and App Bridge session token practices.
Docker Setup: Provide a complete Dockerfile and docker-compose.yml for backend services (Django, PostgreSQL, Redis, Celery).
Testing: Include basic unit tests for backend models and API endpoints (e.g., using Django’s test framework).
Enhancements: Implement all listed enhancements (e.g., real-time updates, multi-lingual support) unless explicitly contradicted by the main requirements.
dont forget to fully uundertand the code and all the project befor 'editing and fixing problems 
also shopify Configuration
App URL
https://cloud-549585597.onetsolutions.network/
Allowed redirection URL(s)
https://cloud-549585597.onetsolutions.network/auth/callback
https://cloud-549585597.onetsolutions.network/auth/shopify/callback
https://cloud-549585597.onetsolutions.network/shopify/callback

and this is .env  file 

# Shopify API Credentials (required)
SHOPIFY_CLIENT_ID=4724ce7b756d55c468cedd9a25bba6d1
SHOPIFY_CLIENT_SECRET=bcef39fcfa0f14c5fc57ad9429abb785
DOMAIN=cloud-549585597.onetsolutions.network
APP_URL=https://cloud-549585597.onetsolutions.network
# Django Settings (required)
SHOPIFY_API_SCOPES=read_products,write_products,read_orders,read_inventory,write_inventory

SECRET_KEY=w8$2x@0p^r-*gzv4i6gl+9!w2_o&1qgm%m&6z0b6z&d!d*ke+4dy!fj$-^14*5m!@p71$9n
DEBUG=True
ALLOWED_HOSTS=cloud-549585597.onetsolutions.network,185.163.125.214
# Email Configuration (optional)
EMAIL_HOST=smtp.example.com
EMAIL_PORT=587
EMAIL_HOST_USER=your-email@gmail.com
EMAIL_HOST_PASSWORD=your-app-password
EMAIL_USE_TLS=True
# Production Settings
SECURE_SSL_REDIRECT=True
SESSION_COOKIE_SECURE=True
CSRF_COOKIE_SECURE=True
# Database Configuration (optional - defaults to SQLite)
# DATABASE_URL=postgresql://user:password@localhost:5432/dbname

# NGROK Settings (for local development)
#NGROK_URL=https://your-ngrok-domain.ngrok.io
NGROK_URL=https://cloud-549585597.onetsolutions.network
SESSION_COOKIE_SAMESITE=None
CSRF_TRUSTED_ORIGINS=https://cloud-549585597.onetsolutions.network,https://admin.shopify.com
# Production Settings
PRODUCTION=False

# Redis Configuration
REDIS_HOST=redis
REDIS_PORT=6379

# WebSocket configuration
WS_SERVER_PORT=8001
WS_PROTOCOL=wss

# Database settings
POSTGRES_DB=smartshelf
POSTGRES_USER=smartshelf_user
POSTGRES_PASSWORD=KUgvbL9J([u4D+S)qw^f?H

DB_NAME=smartshelf
DB_USER=smartshelf_user
DB_PASSWORD=KUgvbL9J([u4D+S)qw^f?H
DB_HOST=db
DB_PORT=5432
DATABASE_URL=postgresql://${DB_USER}:${DB_PASSWORD}@${DB_HOST}:${DB_PORT}/${DB_NAME}




    


