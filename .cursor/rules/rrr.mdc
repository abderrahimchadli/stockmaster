---
description: 
globs: 
alwaysApply: true
---

# Your rule content

- You can @ files here
- You can use markdown but dont have to
think well , take your time 
and do that 
# Detailed Prompt for Creating "StockMaster" - A Shopify Out-of-Stock Management App

## Project Overview
Create a powerful, user-friendly Shopify app using Django backend with HTML, CSS, JavaScript, Bootstrap, and AJAX frontend that automates out-of-stock product management. The app should follow Django best practices, be well-organized, easy to debug, and maintain clean separation of concerns. The interface should be embedded within Shopify admin, featuring an intuitive and visually appealing design that enhances merchant experience.

## Technical Stack & Architecture

### Backend (Django)
- Django 4.2+ with Python 3.11+
- Structure the project using the following organization:
  ```
  stockmaster/
  ├── config/                  # Project settings
  │   ├── settings/
  │   │   ├── base.py          # Base settings
  │   │   ├── development.py   # Development settings
  │   │   └── production.py    # Production settings
  │   ├── urls.py              # Main URL routing
  │   └── wsgi.py              # WSGI configuration
  ├── apps/                    # Django applications
  │   ├── accounts/            # User management
  │   ├── dashboard/           # Main dashboard views
  │   ├── inventory/           # Inventory management
  │   ├── notifications/       # Notification system
  │   ├── rules/               # Business rules engine
  │   └── analytics/           # Reporting and analytics
  ├── core/                    # Core functionality
  │   ├── middleware/          # Custom middleware
  │   ├── shopify/             # Shopify API integration
  │   ├── utils/               # Utility functions
  │   └── webhooks/            # Webhook handlers
  ├── templates/               # HTML templates
  │   ├── base.html            # Base template
  │   ├── dashboard/           # Dashboard templates
  │   ├── settings/            # Settings templates
  │   └── components/          # Reusable components
  ├── static/                  # Static assets
  │   ├── css/                 # CSS files
  │   ├── js/                  # JavaScript files
  │   └── images/              # Image assets
  └── manage.py                # Django management script
  ```

- Implement models with clear relationships:
  - Store (Shopify store information)
  - Product (products from the store)
  - Inventory (inventory levels)
  - Rule (business rules for handling stock)
  - Notification (notification settings)
  - InventoryLog (audit trail of changes)

### Frontend
- **HTML/CSS/JavaScript**
  - Use Bootstrap 5 for responsive design
  - Implement AJAX for asynchronous data updates
  - Use modern ES6+ JavaScript with modular structure
  - Implement responsive dashboard with mobile-first approach

- **UX/UI Guidelines**
  - Follow Shopify's Polaris design system for consistency
  - Use intuitive navigation with clear hierarchy
  - Implement user-friendly forms with instant validation
  - Create meaningful visualizations for inventory data
  - Use skeleton loaders during data fetching

### Shopify Integration
- Implement OAuth flow for secure authentication
- Use Shopify GraphQL API for efficient data fetching
- Set up webhooks for real-time inventory updates
- Implement app embedding within Shopify admin

## Core Features to Implement

### 1. Real-Time Inventory Management
- Build a webhook system to track stock changes in real-time
- Implement background tasks using Celery for processing inventory updates
- Develop multi-location inventory support with aggregated views
- Create threshold configuration for low-stock alerts

### 2. Product Visibility Controls
- Implement automatic hiding of out-of-stock products
- Build collection sorting features to push out-of-stock items down
- Develop scheduling system with configurable delays
- Create bulk actions for applying rules to multiple products
- Implement conditional rule engine for complex scenarios

### 3. Smart Redirects & SEO Protection
- Build custom redirection system for hidden product pages
- Implement SEO-friendly URL handling for redirects
- Create sitemap management for hidden/visible products
- Add metadata preservation for hidden products

### 4. Notification System
- Develop email notification service using Django's email backend
- Implement Slack integration for real-time alerts
- Create in-app notification center for merchants
- Build customizable notification rules and preferences

### 5. Analytics & Reporting
- Design dashboard with key metrics visualization
- Implement exportable reports for inventory status
- Create historical data tracking for stock patterns
- Build predictive features for inventory planning

### 6. Subscription & Billing
- Implement tiered pricing model based on product volume
- Build subscription management with free trial periods
- Create usage tracking for billing purposes
- Implement payment processing with Shopify Billing API

## Development Best Practices

### Django Best Practices
- Use Django apps for logical separation of functionality
- Implement class-based views for consistent patterns
- Create serializers for API responses
- Use Django forms for validation
- Implement Django signals for decoupled event handling
- Use Django middleware for request/response processing
- Create custom management commands for maintenance tasks

### Code Quality & Maintenance
- Implement comprehensive test suite with pytest
- Use Django debug toolbar for development debugging
- Setup logging for production error tracking
- Use type hints throughout the codebase
- Implement automated CI/CD pipeline
- Use black and flake8 for code formatting and linting
- Create detailed documentation with sphinx

### Security Considerations
- Implement proper authentication and authorization
- Secure API endpoints with proper validation
- Use Django's CSRF protection
- Implement rate limiting for API requests
- Follow OWASP security guidelines
- Use environment variables for sensitive information

### Performance Optimization
- Implement database query optimization
- Use caching for frequently accessed data
- Optimize front-end assets with bundling and minification
- Implement lazy loading for dashboard components
- Use pagination for large data sets

## UI/UX Requirements
- Create an intuitive dashboard with key metrics
- Design user-friendly rule configuration interface
- Implement drag-and-drop functionality for rule prioritization
- Create visual indicators for stock status
- Design mobile-responsive interfaces for all screens
- Implement guided setup flow for new users
- Create interactive help system with tooltips

## Implementation Timeline
1. **Week 1-2:** Project setup, authentication, and basic Shopify integration
2. **Week 3-4:** Core inventory tracking and rule engine development
3. **Week 5-6:** Product visibility controls and redirection system
4. **Week 7-8:** Notification system and analytics dashboard
5. **Week 9-10:** Subscription management and final polishing
6. **Week 11-12:** Testing, documentation, and deployment preparation

## Documentation Requirements
- Detailed API documentation
- Comprehensive user guide
- Installation and configuration instructions
- Developer documentation for code maintenance
- Video tutorials for common tasks

## Deliverables
- Complete codebase with version control history
- Deployment-ready application
- Comprehensive test suite
- User and developer documentation
- Setup and installation scripts

dont forget any details and add if there any messing details 

also 
App URL
https://cloud-549585597.onetsolutions.network/ 
Allowed redirection URL(s)

https://cloud-549585597.onetsolutions.network/auth/callback/
https://cloud-549585597.onetsolutions.network/auth/shopify/callback/ 

also 
Client ID
4724ce7b756d55c468cedd9a25bba6d1

Client secret
bcef39fcfa0f14c5fc57ad9429abb785

also in database use postgresql 

aftre creatring the app install requerments 
also 
thes sources my help you read them 
or you can use 
Hi! Afsan,
I successfully resolved the issue using the Shopify environment. Utilizing tools like Shopify App Remix, Shopify App Bridge, and Polaris React streamlined the development process. By making use of webhooks and Polaris, I ensured consistency in both design and functionality. Additionally, Shopify's APIs made it easy to interact with store data.

